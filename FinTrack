<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" type="image/png" href="https://img.freepik.com/free-psd/money-illustration-isolated_23-2151568514.jpg">
    <title>FinTrack</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.2/dist/chart.umd.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    
    <style>
        /* Custom Styles for better visual separation */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6; /* Gray 100 */
        }
        .container-box {
            background-color: white;
            border-radius: 0.5rem; /* rounded-lg */
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1); /* shadow-md */
        }
        .income-color {
            color: #10b981; /* Emerald 500 */
        }
        .expense-color {
            color: #ef4444; /* Red 500 */
        }
        .balance-color {
            color: #3b82f6; /* Blue 500 */
        }
        .tab-button {
            padding: 0.5rem 1rem;
            border-bottom: 3px solid transparent;
            font-weight: 600;
            color: #6b7280; /* Gray 500 */
            transition: all 0.2s;
        }
        .tab-button:hover {
            color: #4b5563; /* Gray 600 */
        }
        .tab-button.active {
            border-color: #3b82f6; /* Blue 500 */
            color: #1f2937; /* Gray 800 */
        }
    </style>
</head>
<body>
    <div class="min-h-screen">
        <header class="bg-white shadow-sm">
    <div class="max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8 flex items-center justify-between">
        
        <div class="flex items-center space-x-2">
            <svg class="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-2.485 0-4.5 2.015-4.5 4.5S9.515 17 12 17s4.5-2.015 4.5-4.5S14.485 8 12 8zM12 8V5m0 3a4.5 4.5 0 014.5 4.5m-4.5-4.5a4.5 4.5 0 00-4.5 4.5m4.5-4.5v9m-4.5-9L5 7m14 10l-4.5-4.5m0 0L12 17m4.5-4.5L19 17"></path>
                </svg>
            <span class="text-3xl font-extrabold text-gray-900 tracking-tight">
                <span class="text-blue-600">Fin</span>Track
            </span>
        </div>
        <div class="ml-4">
            <p id="authStatus" class="mt-1 text-sm text-gray-500 text-right">
                สถานะ: <span class="font-medium text-blue-600">กำลังโหลด...</span>
            </p>
        </div>
    </div>
</header>

        <main class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
            <div class="bg-white px-4 sm:px-6 lg:px-8 pt-4 container-box shadow-none mb-4">
                <div class="flex border-b border-gray-200">
                    <button id="tabDashboardBtn" onclick="switchTab('dashboard')" class="tab-button active">แดชบอร์ดสรุป</button>
                    <button id="tabTransactionBtn" onclick="switchTab('transactions')" class="tab-button">รายการธุรกรรม</button>
                </div>
            </div>

            <div id="dashboardView">
                <div class="space-y-6">
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div class="container-box p-6 flex flex-col items-center text-center">
                            <p class="text-sm font-medium text-gray-500">รายรับทั้งหมด</p>
                            <p id="totalIncome" class="text-2xl font-bold mt-1 income-color">0.00 ฿</p>
                        </div>
                        <div class="container-box p-6 flex flex-col items-center text-center">
                            <p class="text-sm font-medium text-gray-500">รายจ่ายทั้งหมด</p>
                            <p id="totalExpense" class="text-2xl font-bold mt-1 expense-color">0.00 ฿</p>
                        </div>
                        <div class="container-box p-6 flex flex-col items-center text-center">
                            <p class="text-sm font-medium text-gray-500">ยอดคงเหลือสุทธิ</p>
                            <p id="netBalance" class="text-2xl font-bold mt-1 balance-color">0.00 ฿</p>
                        </div>
                    </div>

                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                        <div class="container-box p-6">
                            <h2 class="text-xl font-semibold text-gray-900 mb-4 border-b pb-2">สัดส่วนรายจ่ายตามหมวดหมู่</h2>
                            <div class="relative h-80 flex items-center justify-center">
                                <canvas id="expensePieChart"></canvas>
                                <div id="noPieData" class="absolute inset-0 flex items-center justify-center bg-white/80 hidden">
                                    <p class="text-gray-500">ไม่สามารถแสดงแผนภูมิได้</p>
                                </div>
                            </div>
                        </div>

                        <div class="container-box p-6">
                            <h2 class="text-xl font-semibold text-gray-900 mb-4 border-b pb-2">5 หมวดหมู่รายจ่ายสูงสุด</h2>
                            <div class="relative h-80 flex items-center justify-center">
                                <canvas id="expenseBarChart"></canvas>
                                <div id="noBarData" class="absolute inset-0 flex items-center justify-center bg-white/80 hidden">
                                    <p class="text-gray-500">ไม่สามารถแสดงแผนภูมิได้</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="container-box p-6">
                        <h2 class="text-xl font-semibold text-gray-900 mb-4 border-b pb-2">วิเคราะห์การใช้จ่าย <span class="text-sm font-normal text-blue-500">(FinTrack AI)</span></h2>
                        <div id="aiAnalysis" class="mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg text-sm text-gray-700">
                             กำลังประมวลผลการวิเคราะห์...
                        </div>
                        <h3 class="text-lg font-semibold text-gray-800 mb-3 border-b pb-1">รายละเอียดรายจ่ายตามหมวดหมู่</h3>
                        <div id="categoryAnalysis" class="space-y-4">
                            <p class="text-gray-500">กำลังโหลด...</p>
                        </div>
                    </div>
                </div>
            </div>

            <div id="transactionsView" class="hidden">
                <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                    <div class="lg:col-span-1 container-box p-6 h-fit">
                        <h2 class="text-xl font-semibold text-gray-900 mb-4 border-b pb-2">บันทึกรายการใหม่</h2>
                        
                        <form onsubmit="addTransaction(event)">
                            <div class="space-y-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700">ประเภท</label>
                                    <div class="mt-1 flex space-x-4">
                                        <label class="inline-flex items-center">
                                            <input type="radio" name="type" value="income" class="form-radio text-emerald-600" checked>
                                            <span class="ml-2 income-color font-medium">รายรับ</span>
                                        </label>
                                        <label class="inline-flex items-center">
                                            <input type="radio" name="type" value="expense" class="form-radio text-red-600">
                                            <span class="ml-2 expense-color font-medium">รายจ่าย</span>
                                        </label>
                                    </div>
                                </div>

                                <div>
                                    <label for="date" class="block text-sm font-medium text-gray-700">วันที่</label>
                                    <input type="date" id="date" name="date" required class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2">
                                </div>

                                <div>
                                    <label for="amount" class="block text-sm font-medium text-gray-700">จำนวนเงิน (฿)</label>
                                    <input type="number" id="amount" name="amount" required min="0.01" step="0.01" placeholder="เช่น 1,500.00" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2">
                                </div>

                                <div>
                                    <label for="category" class="block text-sm font-medium text-gray-700">หมวดหมู่</label>
                                    <select id="category" name="category" required class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2">
                                        <option value="">-- เลือกหมวดหมู่ --</option>
                                        <optgroup label="รายรับ">
                                            <option value="เงินเดือน">เงินเดือน</option>
                                            <option value="รายได้เสริม">รายได้เสริม</option>
                                            <option value="โบนัส">โบนัส</option>
                                            <option value="ลงทุน">ลงทุน</option>
                                            <option value="อื่นๆ (รับ)">อื่นๆ (รับ)</option>
                                        </optgroup>
                                        <optgroup label="รายจ่าย">
                                            <option value="อาหาร/เครื่องดื่ม">อาหาร/เครื่องดื่ม</option>
                                            <option value="เดินทาง/คมนาคม">เดินทาง/คมนาคม</option>
                                            <option value="ค่าเช่า/ผ่อนบ้าน">ค่าเช่า/ผ่อนบ้าน</option>
                                            <option value="ค่าสาธารณูปโภค">ค่าสาธารณูปโภค</option>
                                            <option value="ช้อปปิ้ง/เสื้อผ้า">ช้อปปิ้ง/เสื้อผ้า</option>
                                            <option value="บันเทิง/สันทนาการ">บันเทิง/สันทนาการ</option>
                                            <option value="การศึกษา">การศึกษา</option>
                                            <option value="สุขภาพ/ความงาม">สุขภาพ/ความงาม</option>
                                            <option value="อื่นๆ (จ่าย)">อื่นๆ (จ่าย)</option>
                                        </optgroup>
                                    </select>
                                </div>

                                <div>
                                    <label for="description" class="block text-sm font-medium text-gray-700">รายละเอียด</label>
                                    <input type="text" id="description" name="description" placeholder="เช่น จ่ายค่ากาแฟ, รับเงินเดือน" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2">
                                </div>

                                <button type="submit" class="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition duration-150 font-semibold">
                                    บันทึกรายการ
                                </button>
                            </div>
                        </form>
                    </div>

                    <div class="lg:col-span-2 container-box p-6">
                        <div class="flex justify-between items-center mb-4 border-b pb-2">
                            <h2 class="text-xl font-semibold text-gray-900">ประวัติรายการบันทึก</h2>
                            <div class="flex space-x-4">
                                <button onclick="clearAllData()" class="text-sm text-red-600 hover:text-red-800 transition duration-150 flex items-center space-x-1">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg>
                                    <span>ล้างข้อมูลทั้งหมด</span>
                                </button>

                                <button onclick="exportCSV()" class="text-sm text-gray-600 hover:text-blue-600 transition duration-150 flex items-center space-x-1">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path></svg>
                                    <span>ส่งออก CSV</span>
                                </button>
                            </div>
                        </div>

                        <div class="overflow-x-auto">
                            <table class="min-w-full divide-y divide-gray-200">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">วันที่</th>
                                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">รายละเอียด</th>
                                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">หมวดหมู่</th>
                                        <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">จำนวนเงิน</th>
                                        <th scope="col" class="relative px-6 py-3"><span class="sr-only">Delete</span></th>
                                    </tr>
                                </thead>
                                <tbody id="transactionList" class="bg-white divide-y divide-gray-200">
                                    <tr><td colspan="5" class="p-4 text-center text-gray-500">กำลังโหลดรายการ...</td></tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <div id="messageBox" class="fixed inset-0 z-50 bg-gray-900 bg-opacity-50 hidden flex items-center justify-center">
        <div class="bg-white rounded-lg shadow-xl w-full max-w-sm m-4">
            <div class="p-6">
                <h3 id="messageTitle" class="text-lg font-semibold text-gray-900 mb-3">Title</h3>
                <p id="messageBody" class="text-sm text-gray-600 mb-4">Body</p>
                <div class="flex justify-end space-x-3">
                    <button id="messageCancel" class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 transition duration-150 hidden">ยกเลิก</button>
                    <button id="messageConfirm" class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 transition duration-150">ตกลง</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // =======================================================================
        // LOCAL STORAGE & UTILITY SETUP - สำหรับการบันทึกข้อมูลในเครื่อง
        // =======================================================================

        const STORAGE_KEY = 'personalFinanceTransactions';
        let transactions = [];
        let userId = 'local-user'; 
        
        let pieChartInstance = null;
        let barChartInstance = null;
        const CHART_COLORS = [
            '#ef4444', 
            '#f97316', 
            '#f59e0b', 
            '#10b981', 
            '#3b82f6', 
            '#8b5cf6', 
            '#ec4899', 
            '#6b7280', 
            '#14b8a6', 
            '#a855f7', 
        ];

        /**
         * Converts number to formatted currency string (e.g., 10000 -> 10,000.00).
         * @param {number} num
         * @returns {string}
         */
        const formatCurrency = (num) => {
            return parseFloat(num).toLocaleString('th-TH', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
        };

        /**
         * Initializes the application by loading data from Local Storage.
         */
        function initLocalStorage() {
            // 1. อัปเดตสถานะ Auth (จำลอง)
            const authStatusEl = document.getElementById('authStatus');
            authStatusEl.innerHTML = `สถานะ: <span class="font-medium text-blue-600">ทำงานแบบออฟไลน์ (Local Storage)</span> | ID ผู้ใช้: <span class="font-mono text-xs">${userId}</span>`;
            
            // 2. โหลดข้อมูล
            loadTransactions();
            
            // 3. ตั้งค่าวันที่เริ่มต้นในฟอร์ม
            document.getElementById('date').value = new Date().toISOString().split('T')[0];
        }

        /**
         * Saves the current transactions array to Local Storage.
         */
        function saveTransactions() {
            try {
                localStorage.setItem(STORAGE_KEY, JSON.stringify(transactions));
                console.log("Transactions saved to Local Storage:", transactions.length);
            } catch (e) {
                console.error("Error saving to Local Storage:", e);
                alertCustom('บันทึกไม่สำเร็จ', 'ไม่สามารถบันทึกข้อมูลลงในเครื่องได้');
            }
        }

        /**
         * Loads transactions from Local Storage.
         */
        function loadTransactions() {
            try {
                const storedData = localStorage.getItem(STORAGE_KEY);
                if (storedData) {
                    transactions = JSON.parse(storedData).map(t => ({
                        ...t,
                        amount: parseFloat(t.amount) // Ensure amount is a number
                    }));
                } else {
                    transactions = [];
                }
                // Sort by timestamp (newest first) or date (if timestamp is missing)
                transactions.sort((a, b) => {
                    const timeA = a.timestamp || a.date;
                    const timeB = b.timestamp || b.date;
                    return timeB.localeCompare(timeA); // Simple string comparison for sort
                });

                renderTransactions();
                renderDashboard();
                console.log("Transactions loaded:", transactions.length);

            } catch (e) {
                console.error("Error loading from Local Storage:", e);
            }
        }


        // =======================================================================
        // DATA MANAGEMENT (CRUD) - Local Storage Version
        // =======================================================================

        /**
         * Adds a new transaction.
         * @param {Event} event
         */
        window.addTransaction = function(event) {
            event.preventDefault();

            const form = event.target;
            const type = form.type.value;
            const date = form.date.value;
            const amount = parseFloat(form.amount.value);
            const category = form.category.value;
            const description = form.description.value.trim();

            if (isNaN(amount) || amount <= 0 || !category) {
                alertCustom('ข้อมูลไม่ถูกต้อง', 'โปรดกรอกจำนวนเงินและหมวดหมู่ให้ถูกต้อง');
                return;
            }

            const newTransaction = {
                id: Date.now().toString() + Math.random().toString(36).substring(2, 9), 
                type,
                date,
                amount,
                category,
                description,
                timestamp: new Date().toISOString(), 
            };

            transactions.unshift(newTransaction); 
            saveTransactions();
            loadTransactions(); 

            form.reset();
            form.date.value = new Date().toISOString().split('T')[0];
            form.category.selectedIndex = 0;
            
            switchTab('transactions'); 
        }

        /**
         * Deletes a transaction.
         * @param {string} id
         */
        window.deleteTransaction = function(id) {
            confirmCustom('ยืนยันการลบ', 'คุณแน่ใจหรือไม่ว่าต้องการลบรายการนี้อย่างถาวร?', () => {
                const initialLength = transactions.length;
                transactions = transactions.filter(t => t.id !== id);
                
                if (transactions.length < initialLength) {
                    saveTransactions();
                    loadTransactions(); 
                    console.log("Transaction successfully deleted locally.");
                } else {
                    alertCustom('ลบไม่สำเร็จ', 'ไม่พบรายการที่ต้องการลบ');
                }
            });
        }
        
        /**
         * NEW FUNCTION: Clears all data from Local Storage after confirmation.
         */
        window.clearAllData = function() {
             confirmCustom('ยืนยันการล้างข้อมูลทั้งหมด', 
                           'การดำเนินการนี้จะ **ลบรายการธุรกรรมทั้งหมด** ออกจากเครื่องอย่างถาวร! คุณแน่ใจหรือไม่?', 
                           () => {
                localStorage.removeItem(STORAGE_KEY);
                transactions = []; 
                loadTransactions(); 
                alertCustom('ล้างข้อมูลสำเร็จ', 'ข้อมูลธุรกรรมทั้งหมดถูกลบออกจากเครื่องแล้ว');
            });
        }


        // =======================================================================
        // RENDERING & UI LOGIC
        // =======================================================================

        /**
         * Renders the transaction list table.
         */
        function renderTransactions() {
            const listEl = document.getElementById('transactionList');
            if (!listEl) return;

            if (transactions.length === 0) {
                listEl.innerHTML = '<tr><td colspan="5" class="p-4 text-center text-gray-500">ยังไม่มีรายการบันทึก</td></tr>';
                return;
            }

            listEl.innerHTML = transactions.map(t => {
                const amountClass = t.type === 'income' ? 'income-color font-semibold' : 'expense-color font-semibold';
                const sign = t.type === 'income' ? '+' : '-';

                return `
                    <tr class="hover:bg-gray-50 transition duration-100">
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${t.date}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-600">${t.description}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-xs font-medium text-gray-500">${t.category}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-right ${amountClass}">
                            ${sign} ${formatCurrency(t.amount)}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                            <button onclick="deleteTransaction('${t.id}')" class="text-red-600 hover:text-red-900 transition duration-150 p-1 rounded-full hover:bg-red-100">
                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg>
                            </button>
                        </td>
                    </tr>
                `;
            }).join('');
        }

        /**
         * Renders the expense category charts using Chart.js.
         */
        function renderCharts(categoryTotals, totalExpense) {
            // 1. Prepare data
            const sortedCategories = Object.entries(categoryTotals).sort(([, a], [, b]) => b - a);

            const labels = sortedCategories.map(([category]) => category);
            const data = sortedCategories.map(([, amount]) => amount);
            const colors = labels.map((_, index) => CHART_COLORS[index % CHART_COLORS.length]);

            const hasData = sortedCategories.length > 0;
            document.getElementById('noPieData').classList.toggle('hidden', hasData);
            document.getElementById('noBarData').classList.toggle('hidden', hasData);

            // 2. Destroy existing chart instances if they exist
            if (pieChartInstance) {
                pieChartInstance.destroy();
                pieChartInstance = null;
            }
            if (barChartInstance) {
                barChartInstance.destroy();
                barChartInstance = null;
            }

            if (!hasData) return;

            // --- Pie Chart (All Expenses) ---
            const pieCtx = document.getElementById('expensePieChart').getContext('2d');
            pieChartInstance = new Chart(pieCtx, {
                type: 'pie',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'ยอดรวมรายจ่าย (฿)',
                        data: data,
                        backgroundColor: colors,
                        hoverOffset: 4
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top',
                            labels: {
                                font: {
                                    family: 'Inter',
                                }
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.parsed || 0;
                                    const percentage = totalExpense > 0 ? ((value / totalExpense) * 100).toFixed(1) : 0;
                                    return `${label}: ${formatCurrency(value)} ฿ (${percentage}%)`;
                                }
                            },
                            bodyFont: { family: 'Inter' },
                        }
                    }
                }
            });

            // --- Bar Chart (Top 5 Expenses) ---
            const top5Categories = sortedCategories.slice(0, 5);
            const barLabels = top5Categories.map(([category]) => category);
            const barData = top5Categories.map(([, amount]) => amount);
            const barColors = barLabels.map((_, index) => CHART_COLORS[index % CHART_COLORS.length]);

            const barCtx = document.getElementById('expenseBarChart').getContext('2d');
            barChartInstance = new Chart(barCtx, {
                type: 'bar',
                data: {
                    labels: barLabels,
                    datasets: [{
                        label: 'ยอดรวมรายจ่าย (฿)',
                        data: barData,
                        backgroundColor: barColors,
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    indexAxis: 'y',
                    scales: {
                        x: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'จำนวนเงิน (฿)',
                                font: { family: 'Inter' }
                            },
                            ticks: {
                                callback: function(value) {
                                    return formatCurrency(value);
                                },
                                font: { family: 'Inter' }
                            }
                        },
                        y: {
                            ticks: {
                                font: { family: 'Inter' }
                            }
                        }
                    },
                    plugins: {
                        legend: { display: false },
                        tooltip: { bodyFont: { family: 'Inter' } }
                    }
                }
            });
        }
        
        /**
         * Generates an "AI" analysis based on current month's spending vs. income.
         */
        function generateAIAnalysis(totalIncome, totalExpense, categoryTotals) {
            const now = new Date();
            const currentMonthYear = `${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}`;
            const currentDay = now.getDate();
            const daysInMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0).getDate();
            
            // 1. Filter transactions for the current month
            const currentMonthTransactions = transactions.filter(t => t.date.startsWith(currentMonthYear));
            let currentMonthIncome = 0;
            let currentMonthExpense = 0;

            currentMonthTransactions.forEach(t => {
                if (t.type === 'income') {
                    currentMonthIncome += t.amount;
                } else if (t.type === 'expense') {
                    currentMonthExpense += t.amount;
                }
            });

            // 2. Calculate remaining budget/deficit
            const netBalance = currentMonthIncome - currentMonthExpense;
            const remainingExpensePercentage = currentMonthIncome > 0 ? (currentMonthExpense / currentMonthIncome) * 100 : 0;
            const dailyExpenseRate = currentMonthExpense / currentDay;
            const remainingDays = daysInMonth - currentDay;
            const projectedTotalExpense = dailyExpenseRate * daysInMonth;
            const projectedNetBalance = currentMonthIncome - projectedTotalExpense;

            let message = `<p class="font-bold text-blue-800">สรุปภาพรวมการเงินประจำเดือน (ถึงวันที่ ${currentDay}/${currentMonthYear.split('-')[1]})</p>`;
            
            if (currentMonthIncome === 0 && currentMonthExpense === 0) {
                 message += `<p>ยังไม่มีรายการรายรับหรือรายจ่ายในเดือนนี้</p>`;
            } else {
                message += `<ul class="list-disc ml-5 space-y-1 mt-2">`;
                message += `<li><span class="font-medium">รายรับเดือนนี้:</span> ${formatCurrency(currentMonthIncome)} ฿</li>`;
                message += `<li><span class="font-medium">รายจ่ายเดือนนี้:</span> ${formatCurrency(currentMonthExpense)} ฿</li>`;

                // **วิเคราะห์การใช้จ่ายจากรายรับ**
                if (currentMonthIncome > 0) {
                    message += `<li><span class="font-medium">สัดส่วนรายจ่าย:</span> ใช้จ่ายไป **${remainingExpensePercentage.toFixed(1)}%** ของรายรับทั้งหมดในเดือนนี้</li>`;
                }

                // **วิเคราะห์ยอดคงเหลือและแนวโน้ม**
                if (netBalance >= 0) {
                     message += `<li><span class="font-medium text-emerald-600">สถานะปัจจุบัน:</span> เหลือเงินใช้ **${formatCurrency(netBalance)} ฿**</li>`;
                } else {
                     message += `<li><span class="font-medium text-red-600">สถานะปัจจุบัน:</span> มียอดติดลบ **${formatCurrency(Math.abs(netBalance))} ฿** (รายจ่ายสูงกว่ารายรับ)</li>`;
                }
                
                // **การคาดการณ์**
                if (currentMonthIncome > 0 && dailyExpenseRate > 0) {
                    message += `<li><span class="font-medium">คาดการณ์สิ้นเดือน:</span> หากใช้จ่ายด้วยอัตราเฉลี่ย ${formatCurrency(dailyExpenseRate)} ฿/วัน คุณจะเหลือเงินประมาณ **${formatCurrency(projectedNetBalance)} ฿** (อ้างอิงจากรายรับปัจจุบัน)</li>`;
                } else if (currentMonthIncome === 0 && dailyExpenseRate > 0) {
                    message += `<li><span class="font-medium">คำเตือน:</span> มีรายจ่ายเฉลี่ย ${formatCurrency(dailyExpenseRate)} ฿/วัน แต่ยังไม่มีรายรับ.</li>`;
                }

                // **คำแนะนำ**
                if (remainingExpensePercentage >= 70 && currentMonthIncome > 0) {
                    message += `<li class="text-red-700 font-bold">⚠️ ข้อควรระวัง: สัดส่วนการใช้จ่ายสูงถึง ${remainingExpensePercentage.toFixed(1)}% ควรควบคุมรายจ่ายในช่วงที่เหลือของเดือน</li>`;
                } else if (remainingExpensePercentage < 30 && currentMonthIncome > 0) {
                    message += `<li class="text-emerald-700 font-bold">🎉 ยอดเยี่ยม! สัดส่วนการใช้จ่ายต่ำเพียง ${remainingExpensePercentage.toFixed(1)}% สามารถเก็บออมหรือลงทุนได้มากขึ้น</li>`;
                }
                
                // **หมวดหมู่สูงสุด**
                const sortedCategories = Object.entries(categoryTotals).sort(([, a], [, b]) => b - a);
                if (sortedCategories.length > 0) {
                    const topCategory = sortedCategories[0];
                    message += `<li><span class="font-medium">หมวดหมู่ใช้จ่ายสูงสุด:</span> **${topCategory[0]}** (${formatCurrency(topCategory[1])} ฿)</li>`;
                }

                message += `</ul>`;
            }

            return message;
        }


        /**
         * Calculates and renders the dashboard summary and category analysis.
         */
        function renderDashboard() {
            let totalIncome = 0;
            let totalExpense = 0;
            const categoryTotals = {};

            transactions.forEach(t => {
                if (t.type === 'income') {
                    totalIncome += t.amount;
                } else if (t.type === 'expense') {
                    totalExpense += t.amount;
                    categoryTotals[t.category] = (categoryTotals[t.category] || 0) + t.amount;
                }
            });

            const netBalance = totalIncome - totalExpense;

            // 1. Update summary cards
            document.getElementById('totalIncome').textContent = formatCurrency(totalIncome) + ' ฿';
            document.getElementById('totalExpense').textContent = formatCurrency(totalExpense) + ' ฿';
            document.getElementById('netBalance').textContent = formatCurrency(netBalance) + ' ฿';
            document.getElementById('netBalance').className = `text-2xl font-bold mt-1 ${netBalance >= 0 ? 'balance-color' : 'expense-color'}`;
            
            // 2. Render Charts
            renderCharts(categoryTotals, totalExpense);

            // 3. Render AI Analysis (NEW)
            document.getElementById('aiAnalysis').innerHTML = generateAIAnalysis(totalIncome, totalExpense, categoryTotals);

            // 4. Render Category Analysis 
            const analysisEl = document.getElementById('categoryAnalysis');
            const totalExpenseForAnalysis = totalExpense;

            const sortedCategories = Object.entries(categoryTotals).sort(([, a], [, b]) => b - a);

            if (sortedCategories.length === 0) {
                analysisEl.innerHTML = '<p class="text-gray-500">ไม่มีข้อมูลรายจ่ายที่ต้องวิเคราะห์</p>';
                return;
            }

            analysisEl.innerHTML = sortedCategories.map(([category, amount]) => {
                const percentage = totalExpenseForAnalysis > 0 ? ((amount / totalExpenseForAnalysis) * 100).toFixed(1) : 0;
                const widthStyle = `width: ${percentage}%`;

                return `
                    <div class="space-y-1">
                        <div class="flex justify-between text-sm">
                            <span class="font-medium text-gray-700">${category}</span>
                            <span class="text-red-500 font-semibold">${formatCurrency(amount)} ฿ (${percentage}%)</span>
                        </div>
                        <div class="h-2 bg-gray-200 rounded-full overflow-hidden">
                            <div class="h-full bg-red-400 rounded-full" style="${widthStyle}"></div>
                        </div>
                    </div>
                `;
            }).join('');
        }

        // =======================================================================
        // EXPORT FUNCTION (CSV)
        // =======================================================================

        /**
         * Exports all transaction data to a CSV file.
         */
        window.exportCSV = function() {
            if (transactions.length === 0) {
                alertCustom('ไม่พบข้อมูล', 'ไม่มีรายการบันทึกที่จะส่งออก');
                return;
            }

            const headers = ['ID', 'Date', 'Type', 'Category', 'Description', 'Amount', 'Timestamp'];

            // Map data to CSV format
            const csvData = transactions.map(t => [
                t.id,
                t.date,
                t.type === 'income' ? 'รายรับ' : 'รายจ่าย',
                t.category,
                // Sanitize description for CSV
                `"${t.description.replace(/"/g, '""').replace(/\r?\n|\r/g, ' ')}"`,
                t.amount,
                t.timestamp || ''
            ]);

            // Combine headers and data
            const csvArray = [headers.join(','), ...csvData.map(row => row.join(','))];
            let csvString = csvArray.join('\n');
            
            // FIX: Prepend UTF-8 BOM (\ufeff) to ensure Excel recognizes Thai characters correctly.
            const bom = "\ufeff";
            csvString = bom + csvString;


            // Create Blob and download link
            const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement("a");

            if (link.download !== undefined) {
                const url = URL.createObjectURL(blob);
                link.setAttribute("href", url);
                link.setAttribute("download", `financial_report_${new Date().toISOString().slice(0, 10)}.csv`);
                link.style.visibility = 'hidden';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }
        }

        // =======================================================================
        // UI CONTROL
        // =======================================================================

        /**
         * Switches between Dashboard and Transactions view.
         */
        window.switchTab = function(viewId) {
            const views = {
                dashboard: document.getElementById('dashboardView'),
                transactions: document.getElementById('transactionsView')
            };
            const buttons = {
                dashboard: document.getElementById('tabDashboardBtn'),
                transactions: document.getElementById('tabTransactionBtn')
            };

            for (const key in views) {
                if (key === viewId) {
                    views[key].classList.remove('hidden');
                    buttons[key].classList.add('active');
                } else {
                    views[key].classList.add('hidden');
                    buttons[key].classList.remove('active');
                }
            }
        }

        /**
         * Custom Modal/Message Box (Replaces alert/confirm)
         */
        function alertCustom(title, body, onConfirm = null) {
            const modal = document.getElementById('messageBox');
            document.getElementById('messageTitle').textContent = title;
            document.getElementById('messageBody').textContent = body;
            const confirmBtn = document.getElementById('messageConfirm');
            const cancelBtn = document.getElementById('messageCancel');

            // Setup for Alert
            confirmBtn.textContent = 'ตกลง';
            cancelBtn.classList.add('hidden');

            if (!onConfirm) {
                 confirmBtn.onclick = () => modal.classList.add('hidden');
            } else {
                 confirmBtn.onclick = () => {
                    onConfirm();
                    modal.classList.add('hidden');
                };
            }

            modal.classList.remove('hidden');
        }

        /**
         * Custom Modal/Confirm Box (Replaces window.confirm)
         */
        function confirmCustom(title, body, onConfirm) {
            const modal = document.getElementById('messageBox');
            document.getElementById('messageTitle').textContent = title;
            document.getElementById('messageBody').textContent = body;
            const confirmBtn = document.getElementById('messageConfirm');
            const cancelBtn = document.getElementById('messageCancel');

            // Setup for Confirm
            confirmBtn.textContent = 'ยืนยัน';
            confirmBtn.onclick = () => {
                onConfirm();
                modal.classList.add('hidden');
            };
            cancelBtn.textContent = 'ยกเลิก';
            cancelBtn.onclick = () => modal.classList.add('hidden');
            cancelBtn.classList.remove('hidden');

            modal.classList.remove('hidden');
        }

        // =======================================================================
        // START APPLICATION
        // =======================================================================

        window.onload = initLocalStorage;
    </script>
</body>
</html>
